# https://circleci.com/blog/a-guide-to-test-splitting/
# Unable to get jest-junit to work (for splitting tests based on timings)
# because CRA won't allow jest reporters to be customised

# https://github.com/CircleCI-Public/cimg-python
version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.11
executors:
  my-node-docker:
    docker:
      - image: cimg/node:14.17.6
        auth:
          username: qdfn3af9be
          password: $DOCKERHUB_PASSWORD
  my-python-docker:
    docker:
      - image: cimg/python:3.7-node
        auth:
          username: qdfn3af9be
          password: $DOCKERHUB_PASSWORD
jobs:
  test:
    executor: my-node-docker
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run: yarn install
      - save_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: mkdir -p test-results/jest
      - run:
          name: 'Run Tests'
          command: |
            TEST=$(circleci tests glob **/*.test.tsx | circleci tests split)
            yarn test $TEST
      - store_test_results:
          path: ./test-results/jest/
  build_staging:
    executor: my-node-docker
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run: yarn install
      - save_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: yarn run build:staging
      - persist_to_workspace:
          root: .
          paths:
            - build
  deploy_staging:
    executor: my-python-docker
    parallelism: 1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-s3/sync:
          from: build
          to: 's3://app-staging-awcentral/'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          overwrite: true
  build_prod:
    executor: my-node-docker
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "yarn.lock" }}
            - v1-deps-
      - run: yarn install
      - save_cache:
          key: v1-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: yarn run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - build
  deploy_prod:
    executor: my-python-docker
    parallelism: 1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-s3/sync:
          from: build
          to: 's3://app-awcentral/'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          overwrite: true
workflows:
  version: 2
  branch_test:
    jobs:
      - test:
          filters:
            branches:
              ignore: master
  build_and_deploy:
    jobs:
      - test:
          filters:
            branches:
              only: master
      - build_staging:
          requires:
            - test
      - deploy_staging:
          requires:
            - build_staging
      - build_prod:
          requires:
            - deploy_staging
      - hold:
          type: approval
          requires:
            - build_prod
      - deploy_prod:
          requires:
            - hold
